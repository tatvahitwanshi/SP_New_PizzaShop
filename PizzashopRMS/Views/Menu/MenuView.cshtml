@model DataAccessLayer.ViewModels.MenuViewModel
@{
    Layout = "~/Views/Shared/_LayoutCustom.cshtml";
    ViewData["Title"] = " Menu Page";
    ViewBag.Active = "Menu";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <!-- Bootstrap Font Icon CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" />
    <link rel="stylesheet" href="~/css/menu.css">
    <title>Menu Page</title>

</head>

<body>
    <div class="container-fluid p-4">
        <div class="row ">
            <div class="col-4 h2  fw-bold" style="color: #0066A7;">
                Menu
            </div>
        </div>

        <div class="row bg-white p-2 ">
            <nav>
                <div class="nav nav-underline" id="nav-tab" role="tablist">
                    <button class="nav-link tab-btn active" id="nav-home-tab" data-bs-toggle="tab"
                        data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home"
                        aria-selected="true"><i class="bi bi-list-check p-1"></i>Items</button>
                    <button class="nav-link tab-btn" id="nav-profile-tab" data-bs-toggle="tab"
                        data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile"
                        aria-selected="false"><i class="bi bi-ui-checks-grid p-1"></i>Modifiers</button>
                </div>
            </nav>
        </div>
        <div class="row bg-white mt-2">
            <div class="col overflow-auto" >
                <div class="tab-content " id="nav-tabContent">
                    <div class="tab-pane fade show active" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab"
                        tabindex="0">
                        <div id="items-content">
                            <partial name="_PartialViewTab.cshtml" />
                        </div>
                    </div>

                    <div class="tab-pane fade" id="nav-profile" role="tabpanel" aria-labelledby="nav-profile-tab"
                        tabindex="0">
                        <div id="modifier-content">
                            <partial name="_PartialViewModifier.cshtml" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

</html>


<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />
<script src="~/lib/jquery/dist/jquery.min.js"></script>
@* ------------------script added because navbar dropdown is not wokring in this page------------------------ *@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
@* ------------------script added because navbar Toastr is not wokring in this page------------------------ *@
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"
    integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

<script>

    @* -----------------------------------open edit category modal----------------------------------- *@
        function openEditModal(categoryId) {
            
            $.ajax({
                url: '/Menu/EditCategory/' + categoryId,
                type: 'GET',
                success: function (data) {
                    if (data) {
                        console.log("Fetched Data:", data);
                        $('#editCategoryId').val(data.categoryid);
                        $('#editCategoryName').val(data.categoryname);
                        $('#editCategoryDescription').val(data.categorydescription);
                        var modal = new bootstrap.Modal(document.getElementById("staticBackdrop2"));
                        modal.show();
                    } else {
                        alert("No category data found.");
                    }
                },
                error: function () {
                    alert("Failed to load category details.");
                }
            });
        }
    @* ------------------------------open delete category modal----------------------------------- *@
    let categoryIdToDelete = null;
    var deleteCategoryId = 0;

    function openDeleteModal(categoryId) {
        console.log("Delete Category ID:", categoryId);
        deleteCategoryId = categoryId;
        var modal = new bootstrap.Modal(document.getElementById("deleteModal"));
        modal.show();
    }

    $('#confirmDeleteBtn').click(function () {
        console.log("Deleting Category ID:", deleteCategoryId);
        $.ajax({
            url: '@Url.Action("DeleteCategory", "Menu")',
            type: 'POST',
            data: { categoryId: deleteCategoryId },
            success: function (response) {
                location.reload();
            },
            error: function () {
                toastr.error('An error occurred while deleting the category.');
            }
        });
    });
    @* 
    $(document).ready(function () {

        $('button[data-bs-toggle="tab"]').on('click', function (e) {
            var target = $(e.target).attr("data-bs-target");

            if (target === '#nav-home') {
                console.log(target);
                $('#items-content').load('/Menu/_PartialViewTab.cshtml');
            } else if (target === '#nav-profile') {
                 console.log(target);
                $('#modifier-content').load('/Menu/_PartialViewModifier.cshtml');
            }
        });
    }); *@
        let deleteItemIds = [];

    @* Now for modifier *@

        function openModifierGroupDeleteModal(ModifierId) {
            console.log("Delete Category ID:", ModifierId);
            deleteModifierId = ModifierId;
            var modal = new bootstrap.Modal(document.getElementById("deleteModifierGroupModal"));
            modal.show();
        }

    $('#confirmModifierGroupDelete').click(function () {
        console.log("Deleting Modifier ID:", deleteModifierId);
        $.ajax({
            url: '@Url.Action("DeleteModfierGroup", "Menu")',
            type: 'POST',
            data: { modifiergroupid: deleteModifierId },
            success: function (response) {
                location.reload();
            },
            error: function () {
                toastr.error('An error occurred while deleting the category.');
            }
        });
    });


    @* ----------------------------edit modifier group with add existing modifier--------------------------------------- *@
    let selectedEditModifierIds = [];
    function openEditModifierModal(modifierId) {
        $.ajax({
            url: '/Menu/EditModifierGroup/' + modifierId,
            type: 'GET',
            success: function (data) {
                if (data) {
                    console.log("Fetched Data:", data);
                    // Populate the form fields
                    $('#editModifierId').val(data.modifiergroupid);
                    $('#editModifierName').val(data.modifiergroupname);
                    $('#editModifierDescription').val(data.modifiergroupdescription);

                    // Populate the existing modifiers
                    const container = $('#editselectedItemsContainer');
                    container.empty(); // Clear the container first
                    selectedEditModifierIds = [];
                    if (data.existingModifiers && data.existingModifiers.length > 0) {
                        data.existingModifiers.forEach(modifier => {
                            selectedEditModifierIds.push(modifier.modifierId);
                            const badge = `<div class="selected-item badge text-black me-2 mb-2 p-2 d-flex align-items-center border">
                                    <span class="me-2">${modifier.modifierName}</span>
                                    <button type="button" class="btn-close remove-item" aria-label="Close" data-id="${modifier.modifierId}"></button>
                                </div>`
                            container.append(badge);

                        });
                        container.show();
                    } else {
                        container.hide();
                    }
                    $('#selectedEditModifierIds').val(JSON.stringify(selectedEditModifierIds));
                    // Show the modal
                    var modal = new bootstrap.Modal(document.getElementById("editmodifiermodel"));
                    modal.show();
                } else {
                    alert("No modifier data found.");
                }
            },
            error: function () {
                alert("Failed to load modifier details.");
            }
        });
    }


    $(document).on('change', '.inner-check-edit', function () {
        const checkbox = $(this);
        const modifierId = checkbox.data('id');
        const modifierName = checkbox.closest('tr').find('td:nth-child(2)').text().trim();
        const container = $('#editselectedItemsContainer');

        if (checkbox.is(':checked')) {
            // Add the selected item to the div
            const badge = `
            <div class="selected-item badge text-black me-2 mb-2 p-2 d-flex align-items-center border">
                <span class="me-2">${modifierName}</span>
                <button type="button" class="btn-close remove-item" aria-label="Close" data-id="${modifierId}"></button>
            </div>`;
            container.append(badge);
            selectedEditModifierIds.push(modifierId);
            console.log("qqqq", selectedEditModifierIds);
            container.show();

        } else {
            selectedEditModifierIds = selectedEditModifierIds.filter(id => id !== modifierId);
            console.log("Remove", selectedEditModifierIds);
            // Remove the item from the div
            container.find(`.remove-item[data-id="${modifierId}"]`).parent().remove();
            if (container.children().length === 0) {
                container.hide();
            }
        }
    });



    // Handle click on remove button in selected items div
    $(document).on('click', '.remove-item', function () {
        const button = $(this);
        const modifierId = button.data('id');

        selectedEditModifierIds = selectedEditModifierIds.filter(id => id !== modifierId);
        // Uncheck the checkbox in the table
        $(`.inner-check-edit[data-id="${modifierId}"]`).prop('checked', false);

        // Remove the item from the div
        button.parent().remove();
        console.log("Removeeeeee", selectedEditModifierIds);
        const container = $('#editselectedItemsContainer');
        if (container.children().length === 0) {
            container.hide();
        }
    });

</script>
