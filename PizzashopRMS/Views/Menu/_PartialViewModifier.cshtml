@model DataAccessLayer.ViewModels.MenuViewModel
<div class="container-fluid p-3 " style="height: 700px;">
    <div class="row">
        <div class="col-2 ">
            <div class="row d-none d-xl-flex flex-column">
                <div class="">
                    <span class="h4 fw-bold " style="color: #0066A7;">Modifier Group
                        @if (ViewBag.Permissions[PermissionConst.CanAddEdit])
                        {
                            <button type="button" onclick="openAddModifierGroupModal()"
                                style="text-decoration: none; border: none; background-color: white;"><i
                                    class="bi bi-plus-square ms-2 h5"></i>
                            </button>
                        }
                    </span>
                </div>
                <div class="modifier overflow-auto mt-3">
                    @foreach (var modifier in Model.ModifierGroupModel)
                    {
                        <a class="justify-content-start align-items-center modifier-inner-box mt-2 text-reset @(modifier.ModifierGroupId == Model.ModifierItemViewModel.ParentId ? "selected" : "")"
                            style="text-decoration: none;" href="javascript:void(0);" data-modallid="@modifier.ModifierGroupId"
                            onclick="LoadPartialModifierView(@modifier.ModifierGroupId); setActiveModifier(this);">

                            <div class="mb-3 name-sidebar-category ms-1 " id="modifier-container">
                                <img src="~/images/logos/sixdot.png" alt="" style="width:20px; height: 15px;">
                                @modifier.ModifierGroupName
                                @if (ViewBag.Permissions[PermissionConst.CanAddEdit])
                                {
                                    <a class="editButtom" href="javascript:void(0);" style="text-decoration: none; color: grey;"
                                        id="editModifier" onclick="openEditModifierModal(@modifier.ModifierGroupId)">
                                        <i class="bi bi-pen float-end"></i>
                                    </a>
                                }
                                @if (ViewBag.Permissions[PermissionConst.CanDelete])
                                {
                                    <a class="deleteButton" href="javascript:void(0);"
                                        style="text-decoration: none; color: grey;"
                                        onclick="openModifierGroupDeleteModal(@modifier.ModifierGroupId)">
                                        <i class="bi bi-trash float-end"></i>
                                    </a>
                                }
                            </div>
                        </a>
                    }
                </div>
            </div>
        </div>

        <div class="col-xl-10">
            <div class="row">
                <div class="col">
                    <span class="h4 fw-bold " style="color: #0066A7;" data-bs-toggle="offcanvas"
                        href="#offcanvasExample2" role="button1" aria-controls="offcanvasExample2">Modifiers</span>
                </div>
            </div>
            <div class="row">
                <div class="col-12 d-flex justify-content-end">
                    <div class="d-flex " role="search">
                        <div class="d-flex  me-2 p-1 position-relative">
                            <input class="search_input form-control me-2 border-0" type="text" placeholder="Search"
                                aria-label="Search" id="searchInputModifier" oninput="doSearch()">
                            <div class="" onclick="doSearch()">
                                <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor"
                                    class="bi bi-search position-absolute search-icon-main" viewBox="0 0 16 16">
                                    <path
                                        d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                                </svg>
                            </div>
                        </div>
                        @if (ViewBag.Permissions[PermissionConst.CanDelete])
                        {
                            <div class="  btn border " id="massDeleteModifierItemBtn"><i
                                    class="bi bi-trash h4 text-muted"></i></div>
                        }
                        @if (ViewBag.Permissions[PermissionConst.CanAddEdit])
                        {
                            <button class="btn text-white d-none d-md-block ms-2" style=" background-color: #0066A7;"
                                type="button" id="openAddModifierItemModal" onclick="openAddModifierItemModel()">
                                +New Modifier</button>
                            <button class="btn text-white d-md-none ms-2" type="button" style=" background-color: #0066A7;"
                                onclick="openAddModifierItemModel()">+</button>
                        }
                    </div>
                </div>
            </div>
            <div class="" id="modifierContainer">
                <partial name="_PartialModifier.cshtml" , model="Model"></partial>
            </div>
        </div>
    </div>
</div>

@* offcanvas for the modifier group *@
<div class="offcanvas offcanvas-start d-xl-none" tabindex="-1" id="offcanvasExample2"
    aria-labelledby="offcanvasExampleLabel" style="width: auto;" data-bs-scroll="true" data-bs-backdrop="false">
    <div class="offcanvas-header mt-2">
        <span class="h4 fw-bold " style="color: #0066A7;">Modifier Group
            @if (ViewBag.Permissions[PermissionConst.CanAddEdit])
            {
                <button type="button" onclick="openAddModifierGroupModal()"
                    style="text-decoration: none; border: none; background-color: white;"><i
                        class="bi bi-plus-square ms-2 h5"></i>
                </button>
            }
            <button type="button" class="btn-close text-reset " data-bs-dismiss="offcanvas" aria-label="Close"
                style="margin-bottom: inherit; width: 2px; height: 2px;"></button>
    </div>
    <div class="modifier overflow-auto mt-3">
        @foreach (var modifier in Model.ModifierGroupModel)
        {
            <a class="justify-content-start align-items-center modifier-inner-box mt-2 text-reset @(modifier.ModifierGroupId == Model.ModifierItemViewModel.ParentId ? "selected" : "")"
                style="text-decoration: none;" href="javascript:void(0);" data-modallid="@modifier.ModifierGroupId"
                onclick="LoadPartialModifierView(@modifier.ModifierGroupId); setActiveModifier(this);">

                <div class="mb-3 name-sidebar-category ms-1 " id="modifier-container">
                    <img src="~/images/logos/sixdot.png" alt="" style="width:20px; height: 15px;">
                    @modifier.ModifierGroupName
                    @if (ViewBag.Permissions[PermissionConst.CanAddEdit])
                    {
                        <a class="editButtom" href="javascript:void(0);" style="text-decoration: none; color: grey;"
                            id="editModifier" onclick="openEditModifierModal(@modifier.ModifierGroupId)">
                            <i class="bi bi-pen float-end"></i>
                        </a>
                    }
                    @if (ViewBag.Permissions[PermissionConst.CanDelete])
                    {
                        <a class="deleteButton" href="javascript:void(0);" style="text-decoration: none; color: grey;"
                            onclick="openModifierGroupDeleteModal(@modifier.ModifierGroupId)">
                            <i class="bi bi-trash float-end"></i>
                        </a>
                    }
                </div>
            </a>
        }
    </div>
</div>

<!-- Model Add Modifier Group -->
<div class="modal fade" id="addmodifer" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="modalTitle">Add Modifier Group</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form Section -->
                <form method="post" id="addModifierForm">
                    <div id="formSection">
                        @* <input type="hidden" id="SelectedModifierIds" name="SelectedModifierIds"> *@
                        <input type="hidden" id="Modifiersgroupid" asp-for="@Model.AddModifierGroup.Modifiersgroupid">
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="Modifiersgroupname"
                                asp-for="@Model.AddModifierGroup.Modifiersgroupname" placeholder="Category Name">
                            <label for="Modifiersgroupname">Name</label>
                            <span class="text-danger" asp-validation-for="AddModifierGroup.Modifiersgroupname"></span>
                        </div>
                        <div class="form-floating">
                            <textarea class="form-control" asp-for="@Model.AddModifierGroup.Modifiersgroupdescription"
                                id="Modifiersgroupdescription" placeholder="Enter Description"></textarea>
                            <label for="Modifiersgroupdescription">Description</label>
                            <span class="text-danger"
                                asp-validation-for="AddModifierGroup.Modifiersgroupdescription"></span>
                        </div>
                        <div class="mt-3">
                            <a href="#" id="showTable">+ Add Existing Modifier</a>
                        </div>
                        <div id="selectedItemsContainer" class="mt-3 d-flex flex-wrap" style="display: none;">
                            <!-- Selected items will be added here dynamically -->
                        </div>
                        <div class="col mt-3 mb-3 d-flex justify-content-end">
                            <button class="btn text-white me-2" style="background-color: #0066A7;"
                                type="submit">Save</button>
                            <button class="btn" style="border-color: #0066A7; color: #0066A7;" type="button"
                                data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </form>
                <!-- Table Section (Hidden Initially) -->

                <div id="tableSection" style="display: none;">
                    <div class="d-flex  me-2 p-1 position-relative">
                        <input class="search_input form-control me-2 border-0" type="text" placeholder="Search"
                            aria-label="Search" id="searchInputModifierAll" oninput="doSearchModifierAll()">
                        <div class="" onclick="doSearchModifierAll()">
                            <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor"
                                class="bi bi-search position-absolute search-icon-main" viewBox="0 0 16 16">
                                <path
                                    d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                            </svg>
                        </div>
                    </div>
                    <div class="" id="GetAllModifierItems">
                        <partial name="_ExistingModifierItemModal.cshtml"></partial>
                    </div>

                    <!-- Back Button -->
                    <div class="d-flex justify-content-end mt-3">
                        <button class="btn " id="backToForm"
                            style="border-color: #0066A7; color: #0066A7; text-decoration: none;">
                            Add</button>
                        <button class="btn ms-2" id="backToForm1"
                            style="border-color: #0066A7; color: #0066A7; text-decoration: none;">
                            Cancel</button>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<!-- Model Edit Modifier Group -->
<div class="modal fade" id="editmodifiermodel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="editModalTitle">Edit Modifier Group</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="" id="editModifierFormSection">
                    <form method="post" id="modifiergroupUpdateForm" asp-action="UpdateModifierGroup"
                        asp-controller="Menu">
                        <input type="hidden" id="selectedEditModifierIds" name="SelectedEditModifierIds">
                        <input type="hidden" id="editModifierId" asp-for="@Model.EditModifierGroup.ModifierGroupId">
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="editModifierName"
                                asp-for="@Model.EditModifierGroup.ModifierGroupName" placeholder="Category Name"
                                required>
                            <label for="editModifierName">Name</label>
                            <span class="text-danger" asp-validation-for="EditModifierGroup.ModifierGroupName"></span>
                        </div>
                        <div class="form-floating">
                            <textarea class="form-control" asp-for="@Model.EditModifierGroup.ModifierGroupDescription"
                                id="editModifierDescription" placeholder="Enter Description" required></textarea>
                            <label for="editModifierDescription">Description</label>
                            <span class="text-danger"
                                asp-validation-for="EditModifierGroup.ModifierGroupDescription"></span>
                        </div>
                        <div class="mt-3">
                            <a href="#" id="editShowTable">+ Add Existing Modifier</a>
                        </div>
                        <div id="editselectedItemsContainer" class="mt-3 d-flex flex-wrap" style="display: none;">

                        </div>
                        <div class="col mt-3 mb-3 d-flex justify-content-end">
                            <button class="btn text-white me-2" style="background-color: #0066A7;"
                                type="submit">Save</button>
                            <button class="btn" style="border-color: #0066A7; color: #0066A7;" type="button"
                                data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>

                </div>
                <div class="" id="editTableSection" style="display: none;">
                    <div class="d-flex me-2 p-1 position-relative">
                        <input class="search_input form-control me-2 border-0" type="text" placeholder="Search"
                            aria-label="Search" id="searchInputModifierEdit" oninput="doSearchEditModifierAll()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="23" height="23" fill="currentColor"
                            class="bi bi-search position-absolute search-icon-main" viewBox="0 0 16 16">
                            <path
                                d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                        </svg>
                    </div>

                    <div id="GetAllModifierItemsEdit">
                        <partial name="_EditExistingModifierItemModal.cshtml"></partial>
                    </div>

                    <!-- Back Button -->
                    <div class="d-flex justify-content-end mt-3">
                        <button class="btn " id="editBackToForm"
                            style="border-color: #0066A7; color: #0066A7; text-decoration: none;">Add</button>
                        <button class="btn ms-2" id="editBackToForm1"
                            style="border-color: #0066A7; color: #0066A7; text-decoration: none;">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Model Delete -->
<div class="modal fade" id="deleteModifierGroupModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
    aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body">
                <div class="d-flex justify-content-center">
                    <img src="~/images/toppng.com-warning-icon-2400x2400.png" alt="" style="width: 10%; height: 10%;">
                </div>
                <div class="d-flex justify-content-center mt-3">
                    <span class="text-muted">Are you sure you want to delete this Modifier Group?</span>
                </div>
                <div class="d-flex justify-content-center mt-3">
                    <button class="btn text-white" style="background-color: #0066A7;" type="button"
                        id="confirmModifierGroupDelete">Yes</button>
                    <button class="btn ms-2" style="border-color: #0066A7; color: #0066A7;" type="button"
                        data-bs-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<script>

    @* -------------------------active ----------------------- *@
        function setActiveModifier(element) {
            console.log("Active");
            // Remove the 'selected' class from all <li> elements
            document.querySelectorAll('.modifier-inner-box').forEach(function (item) {
                item.classList.remove('selected');
            });
            // Add the 'selected' class to the clicked <li> element
            element.classList.add('selected');

        }
    @* --------------------------------------------------------Delete And Mass Delete Item--------------------------------------------------------- *@
        @* -----------------------checkbox for delete----------------- *@
                @* <!----------in _PartialModifier------------> *@
      
    deleteModifierItemIds = []; // Store selected item IDs
    function openModifierItemDeleteModal(itemId = null) {
        deleteModifierItemIds = []; // Reset array

        if (itemId) {
            console.log("Single delete");
            deleteModifierItemIds.push(itemId); // Single delete
        } else {
            console.log("Multiple delete");
            $(".inner-check-modifier:checked").each(function () {
                deleteModifierItemIds.push($(this).data("id")); // Fix selector
            });
        }
        if (deleteModifierItemIds.length > 0) {
            console.log("Items to delete:", deleteModifierItemIds);
            var modal = new bootstrap.Modal(document.getElementById("modifieritemdeleteModal"));
            modal.show();

        } else {
            toastr.error("Please select at least one item to delete.");
        }
    }
    // Fix mass delete button click event
    $("#massDeleteModifierItemBtn").on("click", function () {
        openModifierItemDeleteModal();

    });
    // Handle delete confirmation
    $(document).on("click", "#modifieritemconfirmDeleteBtn", function () {
        console.log("Deleting Items:", deleteModifierItemIds);
        $.ajax({
            url: '@Url.Action("DeleteModifierItem", "Menu")',
            type: 'POST',
            data: { 
                modifieritemIds: deleteModifierItemIds, 
                mgId: $('#parentIdmodifier').val() 
            },
            success: function (response) {
                deleteModifierItemIds = []; // Reset array
                if (response.success) {
                    var modifierGroupId = $("#parentIdmodifier").val();
                    LoadPartialModifierView(modifierGroupId);
                    var modal= bootstrap.Modal.getInstance(document.getElementById("modifieritemdeleteModal"));
                    modal.hide();
                   toastr.success("Modifier Items deleted successfully.");
                   
                } else { 
                     toastr.error("An error occurred while deleting the items.");
                }
            },
            error: function (xhr, status, error) {
                deleteModifierItemIds = []; // Reset array
                toastr.error("An error occurred while deleting the items." + error);
            }
        });
    });


    @* --------------------------------------------edit modifier item--------------------------------------------- *@
        function GetModifiersItemDetail(id) {
                $.ajax({
                    type: "GET",
                    url: "/Menu/GetModifierItemDetails",
                    data: { id: id },
                    success: function (response) {
                        // Replace modal content with the response (partial view)
                        $("#editModifieritemModal .modal-content").html(response);
                        // Show the modal
                        var modal = new bootstrap.Modal(document.getElementById("editModifieritemModal"));
                        modal.show();
                    },
                    error: function (xhr, status, error) {
                        console.log("Error Response:", xhr.responseText);
                        toastr.error("Failed to fetch modifier item details.");
                    }
                });
        }
    let editselectedModifierIds = [];
    $(document).ready(function () {
        $(document).on("change", "input[name='editmodgroupCheckbox']", function () {

            let modId = $(this).val(); // Get the Modifier Group ID
            let modName = $(this).parent().text().trim(); // Get the Modifier Group Name
            let editselectedContainer = $("#editselectedModifierContainer");

            if ($(this).is(":checked")) {
                editselectedContainer.append(`<span class="badge m-1 selected-modifier text-black" data-id="${modId}">${modName}</span>`);
                editselectedModifierIds.push(modId); // Add to selected list
            } else {
                // Remove from display if unchecked
                editselectedContainer.find(`.selected-modifier[data-id='${modId}']`).remove();
                editselectedModifierIds = editselectedModifierIds.filter(id => id !== modId); // Remove from list
            }
            // Store selected modifier group IDs in hidden input field
            $("#editmodifierGroupIds").val(editselectedModifierIds.join(","));
        });

        // Clear selected items when modal is closed
        $("#editModifieritemModal").on("hidden.bs.modal", function () {
            $("#editselectedModifierContainer").empty(); // Clear UI badges
            $("input[name='editmodgroupCheckbox']").prop("checked", false); // Uncheck all checkboxes
            editselectedModifierIds = []; // Reset selected list
            $("#editmodifierGroupIdsInput").val(""); // Clear hidden input
        });
    });

    $(document).ready(function () {
        console.log("jQuery is loaded and document is ready.");

        @* ------post method ajax call is in the modal partial view(_EditModifierItemModal)----- *@

            // Close Modal and Reset Fields
            $("#editModifieritemModal").on("hidden.bs.modal", function () {
                editselectedModifierIds = [];
                $("#editselectedModifierContainer").empty();
                $("input[name='editmodgroupCheckbox']").prop("checked", false);
                $("#editModifierItemForm")[0].reset();
            });
    });

    @* -------------------------------------------add modifier item checkbox----------------------------- *@
        $(document).on("submit","#addModifierItemForm", function (event) {
            console.log("add modifier item");
            event.preventDefault(); // Prevent default form submission

            let formData = new FormData(this); // Use FormData instead of serialize()

            // Append selected ModifierGroupIds correctly as an array
            selectedModifierIds.forEach(id => formData.append("ModifierGroupIds[]", id));
            
            $.ajax({
                type: "POST",
                url: "/Menu/AddModifierItem", // Ensure correct controller action
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        @* var modal=bootstrap.Modal.getIntance(document.getElementById("addModifieritemModal")) // Close modal
                        modal.hide(); *@
                        $("#addModifieritemModal").modal("hide"); // Close modal
                        $(".modal-backdrop").remove();
                        selectedModifierIds.length = 0; // Clears the array
                        toastr.success(response.message);

                        @* location.reload(); // Refresh page *@
                    } else {
                        toastr.error("Failed to add modifier item.");
                    }
                },
                error: function () {
                    toastr.error("An error occurred while adding the modifier item.");
                }
            });
        });
    @* -------------------open add modifier item---------------------------- *@

        function openAddModifierItemModel() {
            var modal = new bootstrap.Modal(document.getElementById("addModifieritemModal"));
            modal.show();
        }
        

    let selectedModifierIds = [];
    $(document).on("change", "input[name='addmodgroupCheckbox']", function () {
        let modId = $(this).val(); // Get the Modifier Group ID
        let modName = $(this).parent().text().trim(); // Get the Modifier Group Name
        let selectedContainer = $("#addselectedItemsContainer");

        if ($(this).is(":checked")) {
            // Append selected modifier to display
            selectedContainer.append(`<span class="badge m-1 selected-modifier text-black" data-id="${modId}">${modName}</span>`);
            selectedModifierIds.push(modId); // Add to selected list

        } else {
            // Remove from display if unchecked
            selectedContainer.find(`.selected-modifier[data-id='${modId}']`).remove();
            selectedModifierIds = selectedModifierIds.filter(id => id !== modId); // Remove from list
        }
        console.log(selectedModifierIds);

        // Store selected modifier group IDs in hidden input field
        $("#modifierGroupIdsInput").val(selectedModifierIds.join(","));
    });




    @* --------------------------------load modifier item----------------------------------- *@

        function loadModifier(pageSize, searchKey, pageNumber, modgroup = 0) {
            console.log("Page Size:", pageSize, "Search Key:", searchKey, "Page Number:", pageNumber);
            console.log($("#searchInputModifier").val());
            var ModifierGroupId = $('.modifier-inner-box.selected').data('modallid');
            @* if (modgroup == 0) {
                ModifierGroupId =@Model.ModifierItemViewModel.ParentId;
            }
            else {
                ModifierGroupId = modgroup;
            } *@

            console.log(ModifierGroupId);


            $.ajax({
                url: '@Url.Action("GetModifierItemsByModifierGroup", "Menu")',
                type: 'GET',
                data: {
                    modifiergroupid: ModifierGroupId,
                    PageSize: pageSize,
                    SearchKey: searchKey,
                    PageNumber: pageNumber
                },
                success: function (data) {
                    $("#modifierContainer").html(data);
                },
                error: function (error) {
                    console.error('Error loading partial view:', error);
                    $("#modifierContainer").html("<p>Error loading items.</p>");
                }
            });
        }

    function updatePagePerSizeForModifier(modgroup) {
        console.log("jgsdfuysf");
        var pageSize = $("#pageSizeDropdownModifier").val();
        var searchKey = $("#searchInputModifier").val();
        var pageNumber = 1;

        loadModifier(pageSize, searchKey, pageNumber, modgroup);

    }


    function PanginationBtnModifier(pagenumber, modgroup) {
        var pageSize = $("#pageSizeDropdownModifier").val();
        var searchKey = $("#searchInputModifier").val();
        var pageNumber = pagenumber;

        loadModifier(pageSize, searchKey, pageNumber, modgroup);
    }

    function doSearch() {
        var pageSize = $("#pageSizeDropdownModifier").val();
        var searchKey = $("#searchInputModifier").val();
        var pageNumber = 1;
        var modgroup = $("#ModifierGroupIdForSearch").val();

        loadModifier(pageSize, searchKey, pageNumber, modgroup);
    }


    function LoadPartialModifierView(modifierGroupId) {
        console.log("Modifier ID:", modifierGroupId);

        // Show loading animation
        @* $("#modifierContainer").html("<p>Loading...</p>"); *@

        $.ajax({
            url: '@Url.Action("GetModifierItemsByModifierGroup", "Menu")',
            type: 'GET',
            data: { modifiergroupid: modifierGroupId },
            success: function (data) {
                @* console.log('Partial view loaded successfully:', data); *@
                    $("#searchInputModifier").val("");
                $("#modifierContainer").html(data);
            },
            error: function (error) {
                console.error('Error loading partial view:', error);
                $("#modifierContainer").html("<p>Error loading items.</p>");
            }
        });
    }


    document.addEventListener("DOMContentLoaded", function () {
        // Show Table Section in Edit Modal
        document.getElementById("editShowTable").addEventListener("click", function (e) {
            e.preventDefault();
            document.getElementById("editModifierFormSection").style.display = "none";
            document.getElementById("editTableSection").style.display = "block";
            document.getElementById("editModalTitle").innerText = "Select Modifier Items";
        });

        // Back to Form from Table
        document.getElementById("editBackToForm").addEventListener("click", function () {
            $('#selectedEditModifierIds').val(JSON.stringify(selectedEditModifierIds));
            document.getElementById("editModifierFormSection").style.display = "block";
            document.getElementById("editTableSection").style.display = "none";
            document.getElementById("editModalTitle").innerText = "Edit Modifier Group";
        });

        document.getElementById("editBackToForm1").addEventListener("click", function () {
            document.getElementById("editModifierFormSection").style.display = "block";
            document.getElementById("editTableSection").style.display = "none";
            document.getElementById("editModalTitle").innerText = "Edit Modifier Group";
        });

        // Reset Modal on Close
        var editModalElement = document.getElementById('editmodifiermodel');
        editModalElement.addEventListener('hidden.bs.modal', function () {
            document.getElementById("editModifierFormSection").style.display = "block";
            document.getElementById("editTableSection").style.display = "none";
            document.getElementById("editModalTitle").innerText = "Edit Modifier Group";
        });
    });



    @* --------below is for add existing modifier--------- *@
    let selectedIds = []; // Store selected modifier IDs
    function openAddModifierGroupModal() {
        var modal = new bootstrap.Modal(document.getElementById("addmodifer"));
        modal.show();
    }

    $(document).ready(function () {
        let selectedItems = {}; // Store selected items persistently
        @* let selectedIds = []; // Store selected modifier IDs *@
            $('#addmodifer').on('shown.bs.modal', function () {
                loadModifierItems();
            });

        function loadModifierItems(pageNumber = 1, pageSize = 5, searchKey = '') {
            $.ajax({
                url: '/Menu/GetModifierItemsAllByModifierGroup',
                type: 'GET',
                data: {
                    PageNumber: pageNumber,
                    PageSize: pageSize,
                    SearchKey: searchKey
                },
                success: function (response) {
                    if ($('#addmodifer').hasClass('show')) {
                        $('#GetAllModifierItems').html(response);
                        console.log("Final Selected Items:", selectedIds);

                    }
                },
                error: function () {
                    alert("Error loading modifier items.");
                }
            });
        }

        @* ------------------add modifier group ajax call----------------------- *@
            $('#addModifierForm').on('submit', function (event) {
                event.preventDefault();  // Prevent default form submission
                let formData = new FormData(this); // Initialize FormData from the form
                let modifierIdsArray = Array.from(selectedIds);  // Ensure SelectedModifierIds is defined
                formData.append("SelectedAddModifierIds", JSON.stringify(modifierIdsArray));
                    $.ajax({
                        type: "POST",
                        url: "/Menu/AddModifierGroup",  // Update this URL to your actual route
                        data: formData,
                        processData: false,  // Don't process FormData manually
                        contentType: false,  // Let the browser handle content type
                        success: function (response) {
                            var modal = bootstrap.Modal.getInstance(document.getElementById('addmodifer'));
                            modal.hide();
                            toastr.success("Modifier Group added successfully.");
                            location.reload();
                        },
                        error: function (xhr, status, error) {
                            console.log("AJAX error:", status, error);
                            if (typeof toastr !== 'undefined') {
                                toastr.error("There was an error submitting the form because name already exists.");
                            } else {
                                 toastr.error("There was an error submitting the form.");
                            }
                        }
                    });
            });

        // Show table section
        $("#showTable").click(function (e) {
            e.preventDefault();
            $("#formSection").hide();
            $("#tableSection").show();
            $("#modalTitle").text("Select Modifier Items");
        });

        // Hide table section and show form section
        $("#backToForm, #backToForm1").click(function () {
            $("#formSection").show();
            $("#tableSection").hide();
            $("#modalTitle").text("Add Modifier Group");
        });

        // Restore checkbox state when table is loaded or paginated
        function restoreCheckboxState() {
            $(".inner-check").each(function () {
                let itemId = $(this).data("id");
                if (selectedItems[itemId]) {
                    $(this).prop("checked", true);
                }
            });
        }

        // Handle checkbox selection
        $(document).on("change", ".inner-check", function () {
            let itemId = $(this).data("id");
            let itemName = $(this).closest("tr").find("td:nth-child(2)").text().trim();

            if ($(this).is(":checked")) {
                selectedItems[itemId] = { id: itemId, name: itemName };
            } else {
                delete selectedItems[itemId];
            }

            updateSelectedItems();
        });

      
        
        // Capture selected items when clicking "Add"
        $("#backToForm").click(function () {
            console.clear();
            console.log(" Adding Selected Items...");
            updateSelectedItems();
        });

        // Function to update the selected items display & hidden input field
        function updateSelectedItems() {
            let container = $("#selectedItemsContainer");
            container.empty(); // Clear previous items
            selectedIds = Object.keys(selectedItems); // Store only modifier IDs

            if (selectedIds.length > 0) {
                container.show(); // Show the container

                Object.values(selectedItems).forEach(item => {
                    container.append(`
                <div class="selected-item badge text-black me-2 mb-2 p-2 d-flex align-items-center border">
                    <span class="me-2">${item.name}</span>
                    <button type="button" class="btn-close remove-item" aria-label="Close" data-id="${item.id}"></button>
                </div>
                `);
                });
            } else {
                container.hide(); // Hide when no items
            }

            // Update hidden input field with selected IDs
            $("#SelectedModifierIds").val(selectedIds.join(","));
            console.log("Final Selected Items:", selectedIds);
        }

        // Remove item when clicking the close button
        $(document).on("click", ".remove-item", function () {
            let itemId = $(this).data("id");

            delete selectedItems[itemId];
            $(`.inner-check[data-id="${itemId}"]`).prop("checked", false); // Uncheck in table
            console.log("Item removed:", selectedEditModifierIds);
            $('#selectedEditModifierIds').val(JSON.stringify(selectedEditModifierIds));
            updateSelectedItems();
        });

        // Restore checked state when paginating or switching pages
        $(document).on("click", ".pagination a", function () {
            setTimeout(() => {
                restoreCheckboxState();
            }, 200); // Delay to ensure new elements are loaded
        });

        // Reset selected items when modal is closed
        $("#addmodifer").on("hidden.bs.modal", function () {
            console.log("Modal closed. Resetting selected items.");
            selectedItems = {};
            updateSelectedItems();
        });

        // Initial restoration (in case of page reload)
        restoreCheckboxState();
    });

    @* ------Load the partail view for all the modifier item---------- *@

    $('#addModal').on('hidden.bs.modal', function () {
        location.reload();
    });

    @* ---------------------------------------------------Edit ModifierGroup Add Existing---------------------------------------------------- *@
        $(document).ready(function () {
            $('#editmodifiermodel').on('shown.bs.modal', function () {
                loadModifierItems();
            });
            function loadModifierItems(pageNumber = 1, pageSize = 5, searchKey = '') {
                $.ajax({
                    url: '/Menu/GetEditModifierItemsAllByModifierGroup',
                    type: 'GET',
                    data: {
                        PageNumber: pageNumber,
                        PageSize: pageSize,
                        SearchKey: searchKey
                    },
                    success: function (response) {
                        if ($('#editmodifiermodel').hasClass('show')) {
                            $('#GetAllModifierItemsEdit').html(response);
                        }
                    },
                    error: function () {
                        alert("Error loading modifier items.");
                    }
                });
            }
        });

</script>
